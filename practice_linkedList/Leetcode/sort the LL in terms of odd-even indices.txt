Given the head of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.

You must solve the problem in O(1) extra space complexity and O(n) time complexity.

Example:-
Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]

->create 4 nodes evenStart,evenEnd,oddStart,oddEnd
->traverse the whole LinkedList 
->check if index is even ,move the pointer same with odd;
->finally merge both and return;

code:-
  public ListNode oddEvenList(ListNode head) {
        ListNode evens=null;
        ListNode odds=null;
        ListNode evene=null;
        ListNode odde=null;
        int index=3;
        for(ListNode i=head;i!=null;i=i.next)
        {
            if(index%2==0)
            {
                if(evens==null)
                {
                    evens=i;
                    evene=i;
                }
                else{
                    evene.next=i;
                    evene=evene.next;
                }
            }
            else
            {
                   if(odds==null)
                {
                    odds=i;
                    odde=i;
                }
                else{
                    odde.next=i;
                    odde=odde.next;
                }
            }
            index++; 
        }
         if(evens==null && odds==null)return null;
         if(evens!=null) evene.next=null;
            odde.next=evens;
            return odds;
         }


